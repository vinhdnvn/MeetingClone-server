// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  // role in Enumaration
  role       String   @default("USER")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  avatar     String?
  // meetings     Meeting[] // 1-N relationship with Meeting
  // chatMessages ChatMessage[] // 1-N relationship with ChatMessage
  // invitations  Invitation[] // 1-N relationship with Invitation
  // participants Participants[] // 1-N relationship with Participants
}

// model Meeting {
//   id           Int            @id @default(autoincrement())
//   title        String
//   description  String?
//   host         User           @relation(fields: [hostId], references: [id]) // N-1 relationship with User (host)
//   hostId       Int
//   invitations  Invitation[] // 1-N relationship with Invitation
//   start_time   DateTime
//   end_time     DateTime
//   chatMessages ChatMessage[] // 1-N relationship with ChatMessage
//   created_at   DateTime       @default(now())
//   updated_at   DateTime       @updatedAt
//   Participants Participants[]
// }

// model ChatMessage {
//   id         Int      @id @default(autoincrement())
//   content    String
//   sender     User     @relation(fields: [userId], references: [id]) // N-1 relationship with User (sender)
//   userId     Int
//   isPrivate  Boolean?
//   created_at DateTime @default(now())

//   Meeting Meeting[]
// }

// model Invitation {
//   id         Int      @id @default(autoincrement())
//   status     String
//   user       User     @relation(fields: [userId], references: [id]) // N-1 relationship with User
//   userId     Int
//   meeting    Meeting  @relation(fields: [meetingId], references: [id]) // N-1 relationship with Meeting
//   meetingId  Int
//   created_at DateTime @default(now())
// }

// model Participants {
//   id        Int     @id @default(autoincrement())
//   role      String
//   user      User    @relation(fields: [userId], references: [id]) // N-1 relationship with User
//   userId    Int
//   meeting   Meeting @relation(fields: [meetingId], references: [id]) // N-1 relationship with Meeting
//   meetingId Int
// }

// model BookTest {
//   id     Int    @id @default(autoincrement())
//   title  String
//   author String
// }
